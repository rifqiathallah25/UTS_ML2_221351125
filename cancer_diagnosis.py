# -*- coding: utf-8 -*-
"""cancer_diagnosis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p0_1DzRdtSEnxWntbf8iTrzDpRc0kdfr
"""

import streamlit as st
import tensorflow as tf
import numpy as np
import joblib
import os

# Validasi file eksternal
required_files = ["scaler.pkl", "label_encoder.pkl", "cancer_diagnosis.tflite"]
missing_files = [f for f in required_files if not os.path.exists(f)]
if missing_files:
    st.error(f"File berikut tidak ditemukan: {', '.join(missing_files)}")
    st.stop()

# Load scaler dan label encoder
scaler = joblib.load('scaler.pkl')
label_encoder = joblib.load('label_encoder.pkl')

# Load model TFLite
interpreter = tf.lite.Interpreter(model_path="cancer_diagnosis.tflite")
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Judul Aplikasi
st.title("Breast Cancer Diagnosis Prediction")
st.write("Masukkan nilai-nilai fitur dari data sel untuk memprediksi diagnosis (Malignant atau Benign).")

# Daftar fitur
features = [
    "radius_mean","texture_mean","perimeter_mean","area_mean","smoothness_mean",
    "compactness_mean","concavity_mean","concavepoints_mean","symmetry_mean","fractal_dimension_mean",
    "radius_se","texture_se","perimeter_se","area_se","smoothness_se","compactness_se","concavity_se",
    "concave points_se","symmetry_se","fractal_dimension_se","radius_worst","texture_worst",
    "perimeter_worst","area_worst","smoothness_worst","compactness_worst","concavity_worst",
    "concave points_worst","symmetry_worst","fractal_dimension_worst"
]

# Input pengguna
inputs = []
for feature in features:
    value = st.number_input(f"{feature.replace('_', ' ').title()}", value=0.0, format="%.5f")
    inputs.append(value)

if st.button("Prediksi Diagnosis"):
    # Preprocessing input
    input_data = np.array([inputs])
    input_scaled = scaler.transform(input_data).astype(np.float32)

    interpreter.set_tensor(input_details[0]['index'], input_scaled)
    interpreter.invoke()
    prediction = interpreter.get_tensor(output_details[0]['index'])

    predicted_label = np.argmax(prediction)
    diagnosis = label_encoder.inverse_transform([predicted_label])[0]

    st.success(f"Prediksi diagnosis: **{diagnosis.upper()}**")
    st.write(f"Probabilitas: {np.max(prediction) * 100:.2f}%")